import java.text.SimpleDateFormat

def formatBuildDate() {
	SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMddHHmmss");

	return dateFormat.format(new Date());
}

apply plugin: 'java'
apply plugin: 'de.carne.gradleplugins.java'
apply plugin: 'maven'
apply plugin: 'signing'

sourceCompatibility = 1.8

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath 'de.carne:gradleplugins:0.2.1'
	}
}

repositories {
	mavenLocal()
	mavenCentral()
}

dependencies {
	compile(
		'de.carne:common-core:0.0.1'
	)
	testCompile(
		'junit:junit:4.12'
	)
}

jar {
	manifest {
		attributes(
			'X-Version-ProjectId': projectId,
			'X-Version-ProjectName' : project.name,
			'X-Version-ProjectVersion': version,
			'X-Version-BuildDate' : formatBuildDate()
		)
	}
}

task javadocJar(type: Jar) {
 	classifier = 'javadoc'
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name project.name
				packaging 'jar'
				description projectDescription
				url projectUrl

				scm {
					connection projectScm
					developerConnection projectScm
					url projectScmUrl
				}

				licenses {
					license {
						name projectLicense
						url projectLicenseUrl
						distribution 'repo'
					}
				}

				developers {
					developer {
						id 'hdecarne'
						name 'Holger de Carne'
						email 'hdecarne@gmail.com'
					}
				}
			}
		}
	}
}
