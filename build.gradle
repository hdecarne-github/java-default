buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		classpath("org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.5")
		classpath("org.jfrog.buildinfo:build-info-extractor-gradle:4.5.2")
		classpath("com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3")
	}
}

apply plugin: "java-library"
apply plugin: "jacoco"
apply plugin: "org.sonarqube"
apply plugin: "maven-publish"
apply plugin: "com.jfrog.artifactory"
apply plugin: "com.jfrog.bintray"
apply plugin: "eclipse"

def snapshotVersion = project.version.endsWith("-SNAPSHOT")

def resolveProperty(propertyName, envName) {
	def resolved = (project.hasProperty(propertyName) ? project.property(propertyName) : System.getenv(envName));
	
	if(resolved == null) {
		throw new GradleException("Missing property/environment variable: '${propertyName}'/'${envName}")
	} 
	return resolved; 
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	jcenter()
}

dependencies {
	testImplementation("junit:junit:4.12")
}

test {
	// Application test may leave VM in a non working state; hence restart on every test
	forkEvery = 1
}

jacoco {
	toolVersion = "0.7.9"
}

jacocoTestReport {
	reports {
		xml.enabled false
		html.enabled true
		html.destination file("${buildDir}/reports/jacocoHtml")
		csv.enabled false
	}
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	from javadoc
	classifier = "javadoc"
}

publishing {
	publications {
		Bintray(MavenPublication) {
			from components.java
			artifact sourceJar
			artifact javadocJar
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description projectDescription
					url projectUrl
					licenses {
						license {
							name projectLicense
				            url projectLicenseUrl
				            distribution "repo"
				        }
				    }
				    developers {
				        developer {
				            id project.resolveProperty("developerId", "DEVELOPER_ID")
				            name project.resolveProperty("developerName", "DEVELOPER_NAME")
				            email project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
				        }
				    }
				    scm {
						url projectScmUrl
				    }
				}
			}
		}
	}
}

artifactory {
	contextUrl = "https://oss.jfrog.org/artifactory"
	publish {
		repository {
			repoKey = (snapshotVersion ? "oss-snapshot-local" : "oss-release-local")
			username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
			password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
			maven = true
		}
		defaults {
			publications("Bintray")
		}
	}
	resolve {
		repoKey = (snapshotVersion ? "libs-snapshot" : "libs-release")
		username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
		password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
		maven = true
	}
	clientConfig.setIncludeEnvVars(false)
}

bintray {
	user = project.resolveProperty("bintrayUser", "BINTRAY_USER")
	key = project.resolveProperty("bintrayKey", "BINTRAY_KEY")
	publications = [ "Bintray" ]
	pkg {
		repo = "maven"
		name = project.name
		licenses = [ projectLicenseId ]
		vcsUrl = projectScmUrl
		version {
			gpg {
				sign = true
				passphrase = project.resolveProperty("bintrayGpgPassphrase", "BINTRAY_GPG_PASSPHRASE")
            }
		}
	}
}

eclipse {
	classpath {
		defaultOutputDir = file("eclipse-build")
	}
}
