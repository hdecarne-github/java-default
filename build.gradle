// Plugins
plugins {
	id "java-library"
	id "jacoco"
	id "maven-publish"
	id "eclipse"
	id "org.sonarqube" version "2.6.2"
	id "com.jfrog.artifactory" version "4.6.2" 
	id "com.jfrog.bintray" version "1.8.0"
}
// Build helpers
def snapshotBuild = project.version.endsWith("-SNAPSHOT")

def resolveProperty(propertyName, envName) {
	def resolved = (project.findProperty(propertyName) ?: System.getenv(envName));
	
	if(resolved == null) {
		throw new GradleException("Missing property/environment variable: '${propertyName}'/'${envName}")
	} 
	return resolved; 
}

// Project
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

repositories {
	jcenter()
	maven { url "https://oss.jfrog.org/libs-release/" }
	if(snapshotBuild) {
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	}
}

dependencies {
	testImplementation("org.junit.jupiter:junit-jupiter-api:5.1.0")
	testImplementation("org.junit.platform:junit-platform-launcher:1.0.1")
	testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.1.0")
}

test {
    useJUnitPlatform()
    // To make sure System Properties are reset for every test
    forkEvery = 1
}

jacoco {
	toolVersion = "0.8.0"
}

jacocoTestReport {
	reports {
		xml.enabled false
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco")
		csv.enabled false
	}
}

task sourceJar(type: Jar) {
	from sourceSets.main.allJava
	classifier "sources"
}

task javadocJar(type: Jar) {
	from javadoc
	classifier = "javadoc"
}

publishing {
	publications {
		Bintray(MavenPublication) {
			from components.java
			artifact sourceJar
			artifact javadocJar
			pom.withXml {
				asNode().children().last() + {
					resolveStrategy = Closure.DELEGATE_FIRST
					name project.name
					description projectDescription
					url projectUrl
					licenses {
						license {
							name projectLicense
				            url projectLicenseUrl
				            distribution "repo"
				        }
				    }
				    developers {
				        developer {
				            id project.resolveProperty("developerId", "DEVELOPER_ID")
				            name project.resolveProperty("developerName", "DEVELOPER_NAME")
				            email project.resolveProperty("developerEmail", "DEVELOPER_EMAIL")
				        }
				    }
				    scm {
						url projectScmUrl
				    }
				}
			}
		}
	}
}

artifactory {
	contextUrl = "https://oss.jfrog.org/artifactory"
	publish {
		repository {
			repoKey = (snapshotBuild ? "oss-snapshot-local" : "oss-release-local")
			username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
			password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
			maven = true
		}
		defaults {
			publications("Bintray")
		}
	}
	resolve {
		repoKey = (snapshotBuild ? "libs-snapshot" : "libs-release")
		username = project.resolveProperty("artifactory_user", "ARTIFACTORY_USER")
		password = project.resolveProperty("artifactory_password", "ARTIFACTORY_PASSWORD")
		maven = true
	}
	clientConfig.setIncludeEnvVars(false)
}

bintray {
	user = project.resolveProperty("bintrayUser", "BINTRAY_USER")
	key = project.resolveProperty("bintrayKey", "BINTRAY_KEY")
	publications = [ "Bintray" ]
	pkg {
		repo = "maven"
		name = project.name
		licenses = [ projectLicenseId ]
		vcsUrl = projectScmUrl
		version {
			gpg {
				sign = true
				passphrase = project.resolveProperty("bintrayGpgPassphrase", "BINTRAY_GPG_PASSPHRASE")
            }
		}
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
	}
}
